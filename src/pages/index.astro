---
import Layout from "../layouts/Layout.astro";
import { qnaList } from "./questions.js";
import "./styles.css";
import "@fontsource/poppins";
import { Image } from "astro:assets";
import roamer from "../assets/Roamer.png";
import mountain from "../assets/roampic.png";
import pic from "../assets/roampic2.png";
---

<Layout title="Roamer">
  <Image src={roamer} alt="roamer logo" class="logo" />
  <h1>Welcome to Roamer!</h1>
  <h2>Complete the survey below to find out your next dream vacation!</h2>
  <div class="pics">
    <Image src={mountain} alt="mountain" />
    <Image src={pic} alt="pic" />
  </div>
  <form class="questions">
    {
      qnaList.map((qna, i) => {
        return (
          <div>
            <p id={qna.question}>{qna.question}</p>
            {qna.answers.map((answer, i) => {
              return (
                <div class="container">
                  <label for={qna.question}>{answer}</label>
                  <input
                    type="radio"
                    class="answer"
                    id={answer}
                    name={qna.question}
                  />
                </div>
              );
            })}
          </div>
        );
      })
    }
    <input type="submit" class="form-button" />
  </form>

  <div class="result hidden">loading...</div>
  <div class="loading"></div>
</Layout>

<script>
  import OpenAI from "openai";

  const systemContent = `
Create a dream vacation plan considering the form responses and include the following:
- Recommend a country and city anywhere in the world based on the user's preferences for every question in the form response.
- Provide specific famous places or excursions to visit in that city or nearby areas. Highlight landmarks, natural wonders, cultural sites, or adventure activities based on the user's interests.
- Suggest famous food or cuisine from the selected country that the user should try during their trip. Include recommendations for local dishes, street food, or dining experiences that align with the user's flavor preferences.
Display the result to the user in an organized and clear response using a casual tone a travel agent would have with a client.
`;

  const openai = new OpenAI({
    apiKey: import.meta.env.PUBLIC_OPENAI,
    dangerouslyAllowBrowser: true,
  });

  async function getGPTResponse(formResponse) {
    return await openai.chat.completions.create({
      messages: [
        {
          role: "system",
          content: systemContent,
        },
        {
          role: "user",
          content: formResponse,
        },
      ],
      model: "gpt-3.5-turbo",
    });
  }
  const form = document.querySelector(".questions");
  const answers = form.querySelectorAll(".answer");

  let formResponse = "";
  const result = document.querySelector(".result");

  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    form.classList.add("hidden");
    result.classList.remove("hidden");

    answers.forEach((answer: HTMLInputElement) => {
      if (answer.checked) {
        formResponse += "Q." + answer.name + "\nA." + answer.id + "\n";
      }
    });
    console.log(formResponse);

    let res = await getGPTResponse(formResponse);
    result.innerHTML = res.choices[0].message.content;
  });
</script>
